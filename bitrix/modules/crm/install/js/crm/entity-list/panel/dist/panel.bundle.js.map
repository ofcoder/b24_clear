{"version":3,"file":"panel.bundle.js","sources":["../src/event/handlers/call-list/internals/functions.js","../src/event/handlers/base-handler.js","../src/event/handlers/load-enums-and-edit-selected.js","../src/event/router.js","../src/utils.js","../src/event/handlers/batch-manager/execute-assigment.js","../src/event/handlers/batch-manager/execute-conversion.js","../src/event/handlers/batch-manager/execute-deletion.js","../src/event/handlers/batch-manager/execute-exclusion.js","../src/event/handlers/batch-manager/execute-merge.js","../src/event/handlers/batch-manager/execute-refresh-accounting-data.js","../src/event/handlers/batch-manager/execute-set-category.js","../src/event/handlers/batch-manager/execute-set-export.js","../src/event/handlers/batch-manager/execute-set-opened.js","../src/event/handlers/batch-manager/execute-set-stage.js","../src/event/handlers/batch-manager/execute-whatsapp-message.js","../src/event/handlers/call-list/add-items-to-call-list.js","../src/event/handlers/call-list/create-and-start-call-list.js","../src/event/handlers/call-list/create-call-list.js","../src/event/handlers/open-task-creation-form.js","../src/event/handlers/reload-page-after-grid-update.js","../src/event/handlers/render-user-tag-selector.js","../src/event/handlers/sender/internals/functions.js","../src/event/handlers/sender/add-items-to-segment.js","../src/event/handlers/sender/add-letter.js","../src/event/handlers-registry.js","../src/init.js","../src/index.js"],"sourcesContent":["import { Reflection, Text, Type } from 'main.core';\nimport { MessageBox } from 'ui.dialogs.messagebox';\nimport 'crm_activity_planner'; // BX.CrmCallListHelper\n\n/**\n * @memberof BX.Crm.EntityList.Panel\n */\nexport function createCallListAndShowAlertOnErrors(\n\tentityTypeId: number,\n\tselectedIds: number[],\n\tcreateActivity: boolean,\n\tgridId: ?string = null,\n\tforAll: boolean = false,\n): void\n{\n\tvoid createCallList(entityTypeId, selectedIds, createActivity, gridId, forAll)\n\t\t.then(({ errorMessages }) => {\n\t\t\tif (Type.isArrayFilled(errorMessages))\n\t\t\t{\n\t\t\t\tconst error = errorMessages.join('. \\n');\n\t\t\t\tMessageBox.alert(Text.encode(error));\n\t\t\t}\n\t\t})\n\t;\n}\n\n/**\n * @memberof BX.Crm.EntityList.Panel\n */\nexport function createCallList(\n\tentityTypeId: number,\n\tselectedIds: number[],\n\tcreateActivity: boolean,\n\tgridId: string = null,\n\tforAll: boolean = false,\n): Promise<{ errorMessages?: string[] }>\n{\n\treturn new Promise((resolve) => {\n\t\tBX.CrmCallListHelper.createCallList(\n\t\t\t{\n\t\t\t\tentityType: BX.CrmEntityType.resolveName(entityTypeId),\n\t\t\t\tentityIds: (forAll ? [] : selectedIds),\n\t\t\t\tgridId: Type.isNil(gridId) ? undefined : gridId,\n\t\t\t\tcreateActivity,\n\t\t\t},\n\t\t\t(response) => {\n\t\t\t\tif (!Type.isPlainObject(response))\n\t\t\t\t{\n\t\t\t\t\tresolve({});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!response.SUCCESS && response.ERRORS)\n\t\t\t\t{\n\t\t\t\t\tresolve({\n\t\t\t\t\t\terrorMessages: response.ERRORS,\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!response.SUCCESS || !response.DATA)\n\t\t\t\t{\n\t\t\t\t\tresolve({});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst data = response.DATA;\n\t\t\t\tif (data.RESTRICTION)\n\t\t\t\t{\n\t\t\t\t\tshowRestriction(data.RESTRICTION);\n\n\t\t\t\t\tresolve({});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst callListId = data.ID;\n\t\t\t\tif (createActivity && top.BXIM)\n\t\t\t\t{\n\t\t\t\t\ttop.BXIM.startCallList(callListId, {});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t(new BX.Crm.Activity.Planner()).showEdit({\n\t\t\t\t\t\tPROVIDER_ID: 'CALL_LIST',\n\t\t\t\t\t\tPROVIDER_TYPE_ID: 'CALL_LIST',\n\t\t\t\t\t\tASSOCIATED_ENTITY_ID: callListId,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tresolve({});\n\t\t\t},\n\t\t);\n\t});\n}\n\nfunction showRestriction(restriction: string | Object): void\n{\n\tif (Type.isPlainObject(restriction) && Reflection.getClass('B24.licenseInfoPopup'))\n\t{\n\t\t// eslint-disable-next-line no-undef\n\t\tB24.licenseInfoPopup.show('ivr-limit-popup', restriction.HEADER, restriction.CONTENT);\n\t}\n\telse if (Type.isStringFilled(restriction))\n\t{\n\t\t// eslint-disable-next-line no-eval\n\t\teval(restriction);\n\t}\n}\n\nexport function addItemsToCallList(\n\tentityTypeId: number,\n\tselectedIds: number[],\n\tcallListId: number,\n\tcontext: string,\n\tgridId: string,\n\tforAll: boolean,\n): void\n{\n\tBX.CrmCallListHelper.addToCallList({\n\t\tcallListId,\n\t\tcontext,\n\t\tentityType: BX.CrmEntityType.resolveName(entityTypeId),\n\t\tentityIds: (forAll ? [] : selectedIds),\n\t\tgridId,\n\t});\n}\n","import type { ProgressBarRepository } from 'crm.autorun';\nimport type { SettingsCollection } from 'main.core.collections';\n\n/**\n * @abstract\n */\nexport class BaseHandler\n{\n\t/**\n\t * @abstract\n\t */\n\tstatic getEventName(): string\n\t{\n\t\tthrow new Error('not implemented');\n\t}\n\n\tinjectDependencies(progressBarRepo: ProgressBarRepository, extensionSettings: SettingsCollection): void\n\t{}\n\n\t/**\n\t * @abstract\n\t */\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tthrow new Error('not implemented');\n\t}\n}\n","import { ajax as Ajax, Text, Type } from 'main.core';\nimport { type BaseEvent, EventEmitter } from 'main.core.events';\nimport { BaseHandler } from './base-handler';\n\nexport class LoadEnumsAndEditSelected extends BaseHandler\n{\n\t#entityTypeId: number;\n\t#categoryId: ?number = null;\n\n\tstatic #loadedFieldsCache: Map<string, Set<string>> = new Map();\n\n\tconstructor({ entityTypeId, categoryId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tif (!Type.isNil(categoryId))\n\t\t{\n\t\t\tthis.#categoryId = Text.toInteger(categoryId);\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'loadEnumsAndEditSelected';\n\t}\n\n\texecute(grid, selectedIds, forAll): void\n\t{\n\t\tvoid LoadEnumsAndEditSelected\n\t\t\t.loadEnums(grid, this.#entityTypeId, this.#categoryId)\n\t\t\t.finally(() => grid.editSelected())\n\t\t;\n\t}\n\n\tstatic loadEnums(grid: BX.Main.grid, entityTypeId: number, categoryId: ?number): Promise<void>\n\t{\n\t\tconst fieldNames = this.#getEmptyItemsFieldNames(grid);\n\t\tif (fieldNames.length === 0)\n\t\t{\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tAjax.runAction('crm.controller.list.userField.getData', {\n\t\t\t\tdata: {\n\t\t\t\t\tentityTypeId,\n\t\t\t\t\tfieldNames,\n\t\t\t\t\tcategoryId,\n\t\t\t\t},\n\t\t\t}).then(({ data: { fields } }) => {\n\t\t\t\tconst alreadyLoaded = this.#getAlreadyLoadedFieldNames(grid.getId());\n\n\t\t\t\tfor (const cell of this.#getCells(grid))\n\t\t\t\t{\n\t\t\t\t\tconst { name } = cell.dataset;\n\t\t\t\t\tif (!fields[name])\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tcell.dataset.edit = `(${fields[name]})`;\n\t\t\t\t\talreadyLoaded.add(name);\n\t\t\t\t}\n\n\t\t\t\tresolve();\n\t\t\t}).catch((response) => {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'Could not load UF enum values for edit',\n\t\t\t\t\t{ response, grid, entityTypeId, categoryId, fieldNames },\n\t\t\t\t);\n\n\t\t\t\treject();\n\t\t\t});\n\t\t});\n\t}\n\n\tstatic #getEmptyItemsFieldNames(grid: BX.Main.grid): string[]\n\t{\n\t\tconst columnsAll = grid.getParam('COLUMNS_ALL');\n\t\tconst alreadyLoaded = this.#getAlreadyLoadedFieldNames(grid.getId());\n\n\t\tconst fields = [];\n\n\t\tfor (const cell of this.#getCells(grid))\n\t\t{\n\t\t\tconst name = cell.dataset.name ?? null;\n\t\t\tconst columnData = columnsAll[name];\n\n\t\t\tconst isListColumnWithEmptyData = (\n\t\t\t\tType.isObjectLike(columnData?.editable)\n\t\t\t\t&& !columnData.editable.DATA\n\t\t\t\t&& columnData.type === 'list'\n\t\t\t);\n\n\t\t\tif (isListColumnWithEmptyData && !alreadyLoaded.has(name))\n\t\t\t{\n\t\t\t\tfields.push(name);\n\t\t\t}\n\t\t}\n\n\t\treturn fields;\n\t}\n\n\tstatic #getAlreadyLoadedFieldNames(gridId: string): Set<string>\n\t{\n\t\tif (!this.#loadedFieldsCache.has(gridId))\n\t\t{\n\t\t\tthis.#loadedFieldsCache.set(gridId, new Set());\n\t\t}\n\n\t\treturn this.#loadedFieldsCache.get(gridId);\n\t}\n\n\tstatic #getCells(grid: BX.Main.grid): HTMLElement[]\n\t{\n\t\tconst { cells } = grid.getRows().getHeadFirstChild().getNode();\n\n\t\treturn [...cells];\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic onAfterGridUpdate(grid: BX.Main.grid): void\n\t{\n\t\tthis.#loadedFieldsCache.delete(grid.getId());\n\t}\n}\n\nEventEmitter.subscribe('Grid::updated', (event: BaseEvent) => {\n\tconst [grid] = event.getData();\n\n\tLoadEnumsAndEditSelected.onAfterGridUpdate(grid);\n});\n","import { ProgressBarRepository } from 'crm.autorun';\nimport { SettingsCollection } from 'main.core.collections';\nimport { type BaseEvent, EventEmitter } from 'main.core.events';\nimport { BaseHandler } from './handlers/base-handler';\n\ntype BaseHandlerConstructor = typeof BaseHandler;\ntype SubscriptionHandler = (event: BaseEvent) => void;\n\nexport class Router\n{\n\tstatic #handlers: Set<BaseHandlerConstructor> = new Set([]);\n\n\t#grid: BX.Main.grid;\n\t#progressBarRepo: ProgressBarRepository;\n\t#extensionSettings: SettingsCollection;\n\n\t#subscriptions: Map<string, SubscriptionHandler> = new Map();\n\n\tconstructor(grid: BX.Main.grid, progressBarRepo: ProgressBarRepository, extensionSettings: SettingsCollection)\n\t{\n\t\tif (!(grid instanceof BX.Main.grid))\n\t\t{\n\t\t\tthrow new TypeError('expected grid to be instance of BX.Main.grid');\n\t\t}\n\t\tthis.#grid = grid;\n\n\t\tif (!(progressBarRepo instanceof ProgressBarRepository))\n\t\t{\n\t\t\tthrow new TypeError('expected progressBarRepo to be instance of ProgressBarRepository');\n\t\t}\n\t\tthis.#progressBarRepo = progressBarRepo;\n\n\t\tif (!(extensionSettings instanceof SettingsCollection))\n\t\t{\n\t\t\tthrow new TypeError('expected extensionSettings to be instance of SettingsCollection');\n\t\t}\n\t\tthis.#extensionSettings = extensionSettings;\n\t}\n\n\tstatic registerHandler(handler: BaseHandlerConstructor): void\n\t{\n\t\tthis.#handlers.add(handler);\n\t}\n\n\tstartListening(): void\n\t{\n\t\tfor (const HandlerClass of this.constructor.#handlers)\n\t\t{\n\t\t\tconst eventName = `BX.Crm.EntityList.Panel:${HandlerClass.getEventName()}`;\n\n\t\t\tconst subscriptionHandler = this.#createSubscriptionHandler(HandlerClass);\n\n\t\t\tthis.#subscriptions.set(eventName, subscriptionHandler);\n\n\t\t\tEventEmitter.subscribe(eventName, subscriptionHandler);\n\t\t}\n\t}\n\n\t#createSubscriptionHandler(HandlerClass: BaseHandlerConstructor): SubscriptionHandler\n\t{\n\t\treturn (event: BaseEvent) => {\n\t\t\tconst eventHandler: BaseHandler = new HandlerClass(event.getData());\n\n\t\t\teventHandler.injectDependencies(this.#progressBarRepo, this.#extensionSettings);\n\n\t\t\teventHandler.execute(\n\t\t\t\tthis.#grid,\n\t\t\t\tthis.#grid.getRows().getSelectedIds(),\n\t\t\t\tthis.#grid.getActionsPanel()?.getForAllCheckbox()?.checked ?? false,\n\t\t\t);\n\t\t};\n\t}\n\n\tstopListening(): void\n\t{\n\t\tfor (const [eventName, subscriptionHandler] of this.#subscriptions.entries())\n\t\t{\n\t\t\tEventEmitter.unsubscribe(eventName, subscriptionHandler);\n\t\t}\n\t}\n}\n","import { Loc } from 'main.core';\nimport { UI } from 'ui.notification';\n\nexport const NOTIFICATION_AUTO_HIDE_DELAY = 5000;\n\nexport function showAnotherProcessRunningNotification(): void\n{\n\tUI.Notification.Center.notify({\n\t\tcontent: Loc.getMessage('CRM_ENTITY_LIST_PANEL_ANOTHER_PROCESS_IN_PROGRESS'),\n\t\tautoHide: true,\n\t\tautoHideDelay: NOTIFICATION_AUTO_HIDE_DELAY,\n\t});\n}\n","import { BatchAssignmentManager, ProcessRegistry, type ProgressBarRepository } from 'crm.autorun';\nimport { Loc, Text, Type } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { UI } from 'ui.notification';\nimport { NOTIFICATION_AUTO_HIDE_DELAY, showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteAssigment extends BaseHandler\n{\n\t#entityTypeId: number;\n\t#valueElement: HTMLElement;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId, valueElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tthis.#valueElement = document.getElementById(valueElementId);\n\t\tif (!Type.isElementNode(this.#valueElement))\n\t\t{\n\t\t\tthrow new Error('value element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeAssigment';\n\t}\n\n\tinjectDependencies(\n\t\tprogressBarRepo: ProgressBarRepository,\n\t\textensionSettings: SettingsCollection,\n\t): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet assignManager = BatchAssignmentManager.getItem(grid.getId());\n\t\tif (!assignManager)\n\t\t{\n\t\t\tassignManager = BatchAssignmentManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t\tcontainer: this.#progressBarRepo.getOrCreateProgressBarContainer('assign').id,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (assignManager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst userId = Text.toInteger(this.#valueElement.dataset.value);\n\t\tif (userId <= 0)\n\t\t{\n\t\t\tUI.Notification.Center.notify({\n\t\t\t\tcontent: Loc.getMessage('CRM_ENTITY_LIST_PANEL_SELECT_ASSIGNED_BY_ID'),\n\t\t\t\tautoHide: true,\n\t\t\t\tautoHideDelay: NOTIFICATION_AUTO_HIDE_DELAY,\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tassignManager.setAssignedById(userId);\n\n\t\tif (forAll)\n\t\t{\n\t\t\tassignManager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tassignManager.setEntityIds(selectedIds);\n\t\t}\n\n\t\tassignManager.execute();\n\t}\n}\n","import { BatchConversionManager, ProcessRegistry } from 'crm.autorun';\nimport { Type } from 'main.core';\nimport { showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteConversion extends BaseHandler\n{\n\t#valueElement: HTMLElement;\n\n\tconstructor({ valueElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#valueElement = document.getElementById(valueElementId);\n\t\tif (!Type.isElementNode(this.#valueElement))\n\t\t{\n\t\t\tthrow new Error('value element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeConversion';\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tconst manager = BatchConversionManager.getItem(grid.getId());\n\t\tif (!manager)\n\t\t{\n\t\t\tconsole.error(`BatchConversionManager with id ${grid.getId()} not found`);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (manager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst schemeName = this.#valueElement.dataset.value || BX.CrmLeadConversionScheme.dealcontactcompany;\n\t\tmanager.setConfig(BX.CrmLeadConversionScheme.createConfig(schemeName));\n\n\t\tif (forAll)\n\t\t{\n\t\t\tmanager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmanager.setEntityIds(selectedIds);\n\t\t}\n\n\t\tmanager.execute();\n\t}\n}\n","import type { ProgressBarRepository } from 'crm.autorun';\nimport { BatchDeletionManager, ProcessRegistry } from 'crm.autorun';\nimport { Loc, Text } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { EventEmitter } from 'main.core.events';\nimport { UI } from 'ui.notification';\nimport { NOTIFICATION_AUTO_HIDE_DELAY, showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteDeletion extends BaseHandler\n{\n\t#entityTypeId: number;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeDeletion';\n\t}\n\n\tinjectDependencies(progressBarRepo: ProgressBarRepository, extensionSettings: SettingsCollection): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet deletionManager = BatchDeletionManager.getItem(grid.getId());\n\t\tif (deletionManager && deletionManager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!deletionManager)\n\t\t{\n\t\t\tdeletionManager = BatchDeletionManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t\tcontainer: this.#progressBarRepo.getOrCreateProgressBarContainer('delete').id,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (forAll)\n\t\t{\n\t\t\tdeletionManager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdeletionManager.setEntityIds(selectedIds);\n\t\t}\n\n\t\tdeletionManager.execute();\n\n\t\tEventEmitter.subscribeOnce('BX.Crm.BatchDeletionManager:onProcessComplete', this.#notifyOnComplete.bind(this));\n\t}\n\n\t#notifyOnComplete(): void\n\t{\n\t\tUI.Notification.Center.notify({\n\t\t\tcontent: Loc.getMessage('CRM_ENTITY_LIST_PANEL_DELETION_ANALYTICS_WARNING'),\n\t\t\tactions:\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: Loc.getMessage('CRM_ENTITY_LIST_PANEL_SHOW_DETAILS'),\n\t\t\t\t\t\tevents: {\n\t\t\t\t\t\t\tclick: (event, balloon) => {\n\t\t\t\t\t\t\t\tballoon.close();\n\n\t\t\t\t\t\t\t\tif (window.top.BX.Helper)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\twindow.top.BX.Helper.show('redirect=detail&code=8969825');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\tautoHideDelay: NOTIFICATION_AUTO_HIDE_DELAY,\n\t\t});\n\t}\n}\n","import type { ProgressBarRepository } from 'crm.autorun';\nimport { BatchExclusionManager, ProcessRegistry } from 'crm.autorun';\nimport { Text } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteExclusion extends BaseHandler\n{\n\t#entityTypeId: number;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeExclusion';\n\t}\n\n\tinjectDependencies(progressBarRepo: ProgressBarRepository, extensionSettings: SettingsCollection): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet exclusionManager = BatchExclusionManager.getItem(grid.getId());\n\t\tif (exclusionManager && exclusionManager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!exclusionManager)\n\t\t{\n\t\t\texclusionManager = BatchExclusionManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t\tcontainer: this.#progressBarRepo.getOrCreateProgressBarContainer('exclude').id,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (forAll)\n\t\t{\n\t\t\texclusionManager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\texclusionManager.setEntityIds(selectedIds);\n\t\t}\n\n\t\texclusionManager.execute();\n\t}\n}\n","import { BatchMergeManager } from 'crm.merger.batchmergemanager';\nimport { Text } from 'main.core';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteMerge extends BaseHandler\n{\n\t#entityTypeId: number;\n\n\tconstructor({ entityTypeId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeMerge';\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet mergeManager = BatchMergeManager.getItem(grid.getId());\n\t\tif (!mergeManager)\n\t\t{\n\t\t\tmergeManager = BatchMergeManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (!mergeManager.isRunning() && selectedIds.length > 1)\n\t\t{\n\t\t\tmergeManager.setEntityIds(selectedIds);\n\t\t\tmergeManager.execute();\n\t\t}\n\t}\n}\n","import type { ProgressBarRepository } from 'crm.autorun';\nimport { BatchRefreshAccountingDataManager, ProcessRegistry } from 'crm.autorun';\nimport { Text } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteRefreshAccountingData extends BaseHandler\n{\n\t#entityTypeId: number;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeRefreshAccountingData';\n\t}\n\n\tinjectDependencies(progressBarRepo: ProgressBarRepository, extensionSettings: SettingsCollection): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet accountingManager = BatchRefreshAccountingDataManager.getItem(grid.getId());\n\t\tif (accountingManager && accountingManager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!accountingManager)\n\t\t{\n\t\t\taccountingManager = BatchRefreshAccountingDataManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t\tcontainer: this.#progressBarRepo.getOrCreateProgressBarContainer('refresh-accounting-data').id,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (forAll)\n\t\t{\n\t\t\taccountingManager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\taccountingManager.setEntityIds(selectedIds);\n\t\t}\n\n\t\taccountingManager.execute();\n\t}\n}\n","import { BatchSetCategoryManager, ProcessRegistry, type ProgressBarRepository } from 'crm.autorun';\nimport { Text, Type } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteSetCategory extends BaseHandler\n{\n\t#entityTypeId: number;\n\t#valueElement: HTMLElement;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId, valueElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tthis.#valueElement = document.getElementById(valueElementId);\n\t\tif (!Type.isElementNode(this.#valueElement))\n\t\t{\n\t\t\tthrow new Error('value element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeSetCategory';\n\t}\n\n\tinjectDependencies(\n\t\tprogressBarRepo: ProgressBarRepository,\n\t\textensionSettings: SettingsCollection,\n\t): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet categoryManager = BatchSetCategoryManager.getItem(grid.getId());\n\t\tif (!categoryManager)\n\t\t{\n\t\t\tcategoryManager = BatchSetCategoryManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t\tcontainer: this.#progressBarRepo.getOrCreateProgressBarContainer('set-category').id,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (categoryManager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tcategoryManager.setCategoryId(Text.toInteger(this.#valueElement.dataset.value));\n\n\t\tif (forAll)\n\t\t{\n\t\t\tcategoryManager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcategoryManager.setEntityIds(selectedIds);\n\t\t}\n\n\t\tcategoryManager.execute();\n\t}\n}\n","import { BatchSetExportManager, ProcessRegistry, type ProgressBarRepository } from 'crm.autorun';\nimport { Text, Type } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteSetExport extends BaseHandler\n{\n\t#entityTypeId: number;\n\t#valueElement: HTMLElement;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId, valueElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tthis.#valueElement = document.getElementById(valueElementId);\n\t\tif (!Type.isElementNode(this.#valueElement))\n\t\t{\n\t\t\tthrow new Error('value element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeSetExport';\n\t}\n\n\tinjectDependencies(\n\t\tprogressBarRepo: ProgressBarRepository,\n\t\textensionSettings: SettingsCollection,\n\t): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet setExportManager = BatchSetExportManager.getItem(grid.getId());\n\t\tif (!setExportManager)\n\t\t{\n\t\t\tsetExportManager = BatchSetExportManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t\tcontainer: this.#progressBarRepo.getOrCreateProgressBarContainer('set-export').id,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (setExportManager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst isExport = this.#valueElement.dataset.value;\n\t\tif (isExport !== 'Y' && isExport !== 'N')\n\t\t{\n\t\t\tconsole.error('Invalid isExport in value element', isExport, this);\n\n\t\t\treturn;\n\t\t}\n\n\t\tsetExportManager.setExport(isExport);\n\n\t\tif (forAll)\n\t\t{\n\t\t\tsetExportManager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetExportManager.setEntityIds(selectedIds);\n\t\t}\n\n\t\tsetExportManager.execute();\n\t}\n}\n","import { BatchSetOpenedManager, ProcessRegistry, type ProgressBarRepository } from 'crm.autorun';\nimport { Text, Type } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteSetOpened extends BaseHandler\n{\n\t#entityTypeId: number;\n\t#valueElement: HTMLElement;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId, valueElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tthis.#valueElement = document.getElementById(valueElementId);\n\t\tif (!Type.isElementNode(this.#valueElement))\n\t\t{\n\t\t\tthrow new Error('value element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeSetOpened';\n\t}\n\n\tinjectDependencies(\n\t\tprogressBarRepo: ProgressBarRepository,\n\t\textensionSettings: SettingsCollection,\n\t): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet openedManager = BatchSetOpenedManager.getItem(grid.getId());\n\t\tif (!openedManager)\n\t\t{\n\t\t\topenedManager = BatchSetOpenedManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t\tcontainer: this.#progressBarRepo.getOrCreateProgressBarContainer('set-opened').id,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (openedManager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst isOpened = this.#valueElement.dataset.value;\n\t\tif (isOpened !== 'Y' && isOpened !== 'N')\n\t\t{\n\t\t\tconsole.error('Invalid isOpened in value element', isOpened, this);\n\n\t\t\treturn;\n\t\t}\n\n\t\topenedManager.setIsOpened(isOpened);\n\n\t\tif (forAll)\n\t\t{\n\t\t\topenedManager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\topenedManager.setEntityIds(selectedIds);\n\t\t}\n\n\t\topenedManager.execute();\n\t}\n}\n","import { BatchSetStageManager, ProcessRegistry, type ProgressBarRepository } from 'crm.autorun';\nimport { Text, Type } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { showAnotherProcessRunningNotification } from '../../../utils';\nimport { BaseHandler } from '../base-handler';\n\nexport class ExecuteSetStage extends BaseHandler\n{\n\t#entityTypeId: number;\n\t#valueElement: HTMLElement;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId, valueElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tthis.#valueElement = document.getElementById(valueElementId);\n\t\tif (!Type.isElementNode(this.#valueElement))\n\t\t{\n\t\t\tthrow new Error('value element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:executeSetStage';\n\t}\n\n\tinjectDependencies(\n\t\tprogressBarRepo: ProgressBarRepository,\n\t\textensionSettings: SettingsCollection,\n\t): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean): void\n\t{\n\t\tlet stageManager = BatchSetStageManager.getItem(grid.getId());\n\t\tif (!stageManager)\n\t\t{\n\t\t\tstageManager = BatchSetStageManager.create(\n\t\t\t\tgrid.getId(),\n\t\t\t\t{\n\t\t\t\t\tgridId: grid.getId(),\n\t\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\t\tcontainer: this.#progressBarRepo.getOrCreateProgressBarContainer('set-stage').id,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (stageManager.isRunning())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (ProcessRegistry.isProcessRunning(grid.getId()))\n\t\t{\n\t\t\tshowAnotherProcessRunningNotification();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst stageId = this.#valueElement.dataset.value;\n\t\tif (!Type.isStringFilled(stageId))\n\t\t{\n\t\t\tconsole.error('Empty stage id in value element', stageId, this);\n\n\t\t\treturn;\n\t\t}\n\n\t\tstageManager.setStageId(stageId);\n\n\t\tif (forAll)\n\t\t{\n\t\t\tstageManager.resetEntityIds();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstageManager.setEntityIds(selectedIds);\n\t\t}\n\n\t\tstageManager.execute();\n\t}\n}\n","import type { SettingsCollection } from 'main.core.collections';\nimport { type ProgressBarRepository } from 'crm.autorun';\nimport { BaseHandler } from '../base-handler';\nimport { Runtime } from 'main.core';\n\nexport class ExecuteWhatsappMessage extends BaseHandler\n{\n\t#entityTypeId: number;\n\n\t#categoryId: ?number;\n\n\t#isWhatsAppEdnaEnabled: boolean;\n\n\t#ednaManageUrl: string;\n\n\t#progressBarRepo: ProgressBarRepository;\n\n\tconstructor({ entityTypeId, categoryId, isWhatsAppEdnaEnabled, ednaManageUrl })\n\t{\n\t\tsuper();\n\t\tthis.#entityTypeId = entityTypeId;\n\t\tthis.#categoryId = categoryId;\n\t\tthis.#isWhatsAppEdnaEnabled = isWhatsAppEdnaEnabled;\n\t\tthis.#ednaManageUrl = ednaManageUrl;\n\t}\n\n\tinjectDependencies(\n\t\tprogressBarRepo: ProgressBarRepository,\n\t\textensionSettings: SettingsCollection,\n\t): void\n\t{\n\t\tthis.#progressBarRepo = progressBarRepo;\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'BatchManager:whatsappMessage';\n\t}\n\n\tasync execute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean)\n\t{\n\t\tif (!this.#isWhatsAppEdnaEnabled)\n\t\t{\n\t\t\tthis.#showConnectEdnaSlider();\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.#isEntityTypeSupported(this.#entityTypeId))\n\t\t{\n\t\t\tconsole.error(`entityTypeId ${this.#entityTypeId} is not supported for whatsapp message`);\n\n\t\t\treturn;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tconst exports = await Runtime.loadExtension('crm.group-actions.messages');\n\t\t\tconst { Messages } = exports;\n\n\t\t\tconst options = {\n\t\t\t\tgridId: grid.getId(),\n\t\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\t\tcategoryId: this.#categoryId,\n\t\t\t\tselectedIds,\n\t\t\t\tforAll,\n\t\t\t};\n\n\t\t\tconst whatsAppMessage = Messages.getInstance(this.#progressBarRepo, options);\n\t\t\tawait whatsAppMessage.execute();\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n\n\t#isEntityTypeSupported(entityTypeId: number): boolean\n\t{\n\t\tconst supportTypes = [\n\t\t\tBX.CrmEntityType.enumeration.contact,\n\t\t\tBX.CrmEntityType.enumeration.company,\n\t\t];\n\n\t\treturn supportTypes.includes(entityTypeId);\n\t}\n\n\t#showConnectEdnaSlider(): void\n\t{\n\t\tBX.SidePanel.Instance.open(\n\t\t\tthis.#ednaManageUrl,\n\t\t\t{\n\t\t\t\twidth: 700,\n\t\t\t\tevents: {\n\t\t\t\t\tonClose(e) {\n\t\t\t\t\t\tBX.SidePanel.Instance.postMessage(\n\t\t\t\t\t\t\te.getSlider(),\n\t\t\t\t\t\t\t'ContactCenter:reloadItem',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmoduleId: 'imopenlines',\n\t\t\t\t\t\t\t\titemCode: 'whatsappbyedna',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n}\n","import { Text, Type } from 'main.core';\nimport { BaseHandler } from './../base-handler';\nimport { addItemsToCallList } from './internals/functions';\n\nexport class AddItemsToCallList extends BaseHandler\n{\n\t#entityTypeId: number;\n\t#callListId: number;\n\t#context: string;\n\n\tconstructor({ entityTypeId, callListId, context })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tthis.#callListId = Text.toInteger(callListId);\n\t\tif (this.#callListId <= 0)\n\t\t{\n\t\t\tthrow new Error('callListId is required');\n\t\t}\n\n\t\tthis.#context = String(context);\n\t\tif (!Type.isStringFilled(this.#context))\n\t\t{\n\t\t\tthrow new Error('context is required');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'CallList:addItemsToCallList';\n\t}\n\n\texecute(grid, selectedIds, forAll)\n\t{\n\t\tif (selectedIds.length === 0 && !forAll)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\taddItemsToCallList(\n\t\t\tthis.#entityTypeId,\n\t\t\tselectedIds,\n\t\t\tthis.#callListId,\n\t\t\tthis.#context,\n\t\t\tgrid.getId(),\n\t\t\tforAll,\n\t\t);\n\t}\n}\n","import { Text } from 'main.core';\nimport { BaseHandler } from './../base-handler';\nimport { createCallListAndShowAlertOnErrors } from './internals/functions';\n\nexport class CreateAndStartCallList extends BaseHandler\n{\n\t#entityTypeId: number;\n\n\tconstructor({ entityTypeId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'CallList:createAndStartCallList';\n\t}\n\n\texecute(grid, selectedIds, forAll)\n\t{\n\t\tcreateCallListAndShowAlertOnErrors(this.#entityTypeId, selectedIds, true, grid.getId(), forAll);\n\t}\n}\n","import { Text } from 'main.core';\nimport { BaseHandler } from '../base-handler';\nimport { createCallListAndShowAlertOnErrors } from './internals/functions';\n\nexport class CreateCallList extends BaseHandler\n{\n\t#entityTypeId: number;\n\n\tconstructor({ entityTypeId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'CallList:createCallList';\n\t}\n\n\texecute(grid, selectedIds, forAll)\n\t{\n\t\tcreateCallListAndShowAlertOnErrors(this.#entityTypeId, selectedIds, false, grid.getId(), forAll);\n\t}\n}\n","import type { ProgressBarRepository } from 'crm.autorun';\nimport { Loc, Reflection, Text } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { BaseHandler } from './base-handler';\n\nexport class OpenTaskCreationForm extends BaseHandler\n{\n\t#entityTypeId: number;\n\n\t#extensionSettings: SettingsCollection;\n\n\tconstructor({ entityTypeId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'openTaskCreationForm';\n\t}\n\n\tinjectDependencies(progressBarRepo: ProgressBarRepository, extensionSettings: SettingsCollection)\n\t{\n\t\tthis.#extensionSettings = extensionSettings;\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean)\n\t{\n\t\tconst urlTemplate = String(this.#extensionSettings.get('taskCreateUrl'));\n\t\tif (urlTemplate === '')\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tconst entityTypeName = BX.CrmEntityType.resolveName(this.#entityTypeId);\n\t\tconst entityKeys = selectedIds.map((id) => BX.CrmEntityType.prepareEntityKey(entityTypeName, id));\n\n\t\tconst url = urlTemplate\n\t\t\t.replace(encodeURIComponent('#USER_ID#'), Loc.getMessage('USER_ID'))\n\t\t\t.replace(encodeURIComponent('#ENTITY_KEYS#'), entityKeys.join(';'))\n\t\t;\n\n\t\tif (Reflection.getClass('BX.SidePanel.Instance.open'))\n\t\t{\n\t\t\tBX.SidePanel.Instance.open(url);\n\t\t}\n\t\telse\n\t\t{\n\t\t\twindow.open(url);\n\t\t}\n\t}\n}\n","import { Text, Type } from 'main.core';\nimport { type BaseEvent, EventEmitter } from 'main.core.events';\nimport { BaseHandler } from './base-handler';\n\nexport class ReloadPageAfterGridUpdate extends BaseHandler\n{\n\t#isReloadOnlyIfForAll: boolean = false;\n\n\tconstructor({ isReloadOnlyIfForAll })\n\t{\n\t\tsuper();\n\n\t\tif (!Type.isNil(isReloadOnlyIfForAll))\n\t\t{\n\t\t\tthis.#isReloadOnlyIfForAll = Text.toBoolean(isReloadOnlyIfForAll);\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'reloadPageAfterGridUpdate';\n\t}\n\n\texecute(grid, selectedIds, forAll)\n\t{\n\t\tif (!forAll && this.#isReloadOnlyIfForAll)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tEventEmitter.subscribe('Grid::updated', (event: BaseEvent<Array>) => {\n\t\t\tconst [eventSender] = event.getData();\n\n\t\t\tthis.#reloadPageAfterEvent(grid, eventSender);\n\t\t});\n\t}\n\n\t#reloadPageAfterEvent(target: BX.Main.grid, eventSender: BX.Main.grid): void\n\t{\n\t\tif (target !== eventSender)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tsetTimeout(() => window.location.reload(), 0);\n\t}\n}\n","import { Type } from 'main.core';\nimport type { BaseEvent } from 'main.core.events';\nimport { TagSelector } from 'ui.entity-selector';\nimport { BaseHandler } from './base-handler';\n\nexport class RenderUserTagSelector extends BaseHandler\n{\n\t#targetElement: HTMLElement;\n\n\tconstructor({ targetElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#targetElement = document.getElementById(targetElementId);\n\t\tif (!Type.isElementNode(this.#targetElement))\n\t\t{\n\t\t\tthrow new Error('target element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'renderUserTagSelector';\n\t}\n\n\texecute(grid: BX.Main.grid, selectedIds: number[], forAll: boolean)\n\t{\n\t\tconst tagSelector = new TagSelector({\n\t\t\tmultiple: false,\n\t\t\tdialogOptions: {\n\t\t\t\tcontext: `crm.entity-list.${RenderUserTagSelector.getEventName()}.${grid.getId()}`,\n\t\t\t\tentities: [\n\t\t\t\t\t{ id: 'user' },\n\t\t\t\t],\n\t\t\t},\n\t\t\tevents: {\n\t\t\t\tonTagAdd: (event: BaseEvent) => {\n\t\t\t\t\tconst { tag } = event.getData();\n\n\t\t\t\t\tthis.#targetElement.dataset.value = String(tag.getId());\n\t\t\t\t},\n\t\t\t\tonTagRemove: (event: BaseEvent) => {\n\t\t\t\t\tconst { tag } = event.getData();\n\n\t\t\t\t\tif (String(this.#targetElement.dataset.value) === String(tag.getId()))\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete this.#targetElement.dataset.value;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\ttagSelector.renderTo(this.#targetElement);\n\t}\n}\n","import { ajax as Ajax, Text } from 'main.core';\nimport { MessageBox } from 'ui.dialogs.messagebox';\n\nexport function saveEntitiesToSegment(\n\tsegmentId: ?number,\n\tentityTypeId: number,\n\tentityIds: number[],\n\tgridId: ?string,\n): Promise<{segment: Object}>\n{\n\treturn new Promise((resolve, reject) => {\n\t\tAjax.runAction('crm.integration.sender.segment.upload', {\n\t\t\tdata: {\n\t\t\t\tsegmentId,\n\t\t\t\tentityTypeName: BX.CrmEntityType.resolveName(entityTypeId),\n\t\t\t\tentities: entityIds,\n\t\t\t\tgridId,\n\t\t\t},\n\t\t}).then(({ data }) => {\n\t\t\tif ('errors' in data)\n\t\t\t{\n\t\t\t\tMessageBox.alert(Text.encode(data.errors.join('\\n')));\n\n\t\t\t\treject();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve({ segment: data });\n\t\t}).catch(reject);\n\t});\n}\n","import { Text, Type } from 'main.core';\nimport { UI } from 'ui.notification';\nimport { NOTIFICATION_AUTO_HIDE_DELAY } from '../../../utils';\nimport { BaseHandler } from './../base-handler';\nimport { saveEntitiesToSegment } from './internals/functions';\n\nexport class AddItemsToSegment extends BaseHandler\n{\n\t#entityTypeId: number;\n\t#valueElement: HTMLElement;\n\n\tconstructor({ entityTypeId, valueElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tthis.#valueElement = document.getElementById(valueElementId);\n\t\tif (!Type.isElementNode(this.#valueElement))\n\t\t{\n\t\t\tthrow new Error('value element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'Sender:addItemsToSegment';\n\t}\n\n\texecute(grid, selectedIds, forAll)\n\t{\n\t\tconst segmentId = Text.toInteger(this.#valueElement.dataset.value);\n\n\t\tgrid.disableActionsPanel();\n\n\t\tvoid saveEntitiesToSegment(\n\t\t\tsegmentId <= 0 ? null : segmentId,\n\t\t\tthis.#entityTypeId,\n\t\t\tselectedIds,\n\t\t\tforAll ? grid.getId() : null,\n\t\t).then(({ segment }) => {\n\t\t\tif (segment.textSuccess)\n\t\t\t{\n\t\t\t\tUI.Notification.Center.notify({\n\t\t\t\t\tcontent: segment.textSuccess,\n\t\t\t\t\tautoHide: true,\n\t\t\t\t\tautoHideDelay: NOTIFICATION_AUTO_HIDE_DELAY,\n\t\t\t\t});\n\t\t\t}\n\t\t}).finally(() => grid.enableActionsPanel());\n\t}\n}\n","import type { ProgressBarRepository } from 'crm.autorun';\nimport { Reflection, Text, Type } from 'main.core';\nimport type { SettingsCollection } from 'main.core.collections';\nimport { BaseHandler } from './../base-handler';\nimport { saveEntitiesToSegment } from './internals/functions';\n\nexport class AddLetter extends BaseHandler\n{\n\t#settings: SettingsCollection;\n\n\t#entityTypeId: number;\n\t#valueElement: HTMLElement;\n\n\tconstructor({ entityTypeId, valueElementId })\n\t{\n\t\tsuper();\n\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tif (!BX.CrmEntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error('entityTypeId is required');\n\t\t}\n\n\t\tthis.#valueElement = document.getElementById(valueElementId);\n\t\tif (!Type.isElementNode(this.#valueElement))\n\t\t{\n\t\t\tthrow new Error('value element not found');\n\t\t}\n\t}\n\n\tstatic getEventName(): string\n\t{\n\t\treturn 'Sender:addLetter';\n\t}\n\n\tinjectDependencies(progressBarRepo: ProgressBarRepository, extensionSettings: SettingsCollection)\n\t{\n\t\tthis.#settings = extensionSettings;\n\t}\n\n\texecute(grid, selectedIds, forAll)\n\t{\n\t\tconst letterCode = this.#valueElement.dataset.value;\n\t\tif (!Type.isStringFilled(letterCode))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!this.#getAvailableLetterCodes().includes(letterCode)\n\t\t\t&& Reflection.getClass('BX.Sender.B24License')\n\t\t)\n\t\t{\n\t\t\tBX.Sender.B24License.showMailingPopup();\n\n\t\t\treturn;\n\t\t}\n\n\t\tvoid saveEntitiesToSegment(\n\t\t\tnull,\n\t\t\tthis.#entityTypeId,\n\t\t\tselectedIds,\n\t\t\tforAll ? grid.getId() : null,\n\t\t).then(({ segment }) => {\n\t\t\tconst url = this.#settings.get('sender.letterAddUrl')\n\t\t\t\t.replace('#code#', letterCode)\n\t\t\t\t.replace('#segment_id#', segment.id)\n\t\t\t;\n\n\t\t\tBX.SidePanel.Instance.open(url, { cacheable: false });\n\t\t});\n\t}\n\n\t#getAvailableLetterCodes(): string[]\n\t{\n\t\treturn this.#settings.get('sender.availableLetterCodes') || [];\n\t}\n}\n","import { ExecuteAssigment } from './handlers/batch-manager/execute-assigment';\nimport { ExecuteConversion } from './handlers/batch-manager/execute-conversion';\nimport { ExecuteDeletion } from './handlers/batch-manager/execute-deletion';\nimport { ExecuteExclusion } from './handlers/batch-manager/execute-exclusion';\nimport { ExecuteMerge } from './handlers/batch-manager/execute-merge';\nimport { ExecuteRefreshAccountingData } from './handlers/batch-manager/execute-refresh-accounting-data';\nimport { ExecuteSetCategory } from './handlers/batch-manager/execute-set-category';\nimport { ExecuteSetExport } from './handlers/batch-manager/execute-set-export';\nimport { ExecuteSetOpened } from './handlers/batch-manager/execute-set-opened';\nimport { ExecuteSetStage } from './handlers/batch-manager/execute-set-stage';\nimport { ExecuteWhatsappMessage } from './handlers/batch-manager/execute-whatsapp-message';\nimport { AddItemsToCallList } from './handlers/call-list/add-items-to-call-list';\nimport { CreateAndStartCallList } from './handlers/call-list/create-and-start-call-list';\nimport { CreateCallList } from './handlers/call-list/create-call-list';\nimport { LoadEnumsAndEditSelected } from './handlers/load-enums-and-edit-selected';\nimport { OpenTaskCreationForm } from './handlers/open-task-creation-form';\nimport { ReloadPageAfterGridUpdate } from './handlers/reload-page-after-grid-update';\nimport { RenderUserTagSelector } from './handlers/render-user-tag-selector';\nimport { AddItemsToSegment } from './handlers/sender/add-items-to-segment';\nimport { AddLetter } from './handlers/sender/add-letter';\nimport { Router } from './router';\n\n// region batch processing\nRouter.registerHandler(ExecuteDeletion);\nRouter.registerHandler(ExecuteSetStage);\nRouter.registerHandler(ExecuteSetCategory);\nRouter.registerHandler(ExecuteSetOpened);\nRouter.registerHandler(ExecuteSetExport);\nRouter.registerHandler(ExecuteMerge);\nRouter.registerHandler(ExecuteExclusion);\nRouter.registerHandler(ExecuteAssigment);\nRouter.registerHandler(ExecuteConversion);\nRouter.registerHandler(ExecuteWhatsappMessage);\nRouter.registerHandler(ExecuteRefreshAccountingData);\n// endregion\n\n// region call list\nRouter.registerHandler(CreateCallList);\nRouter.registerHandler(CreateAndStartCallList);\nRouter.registerHandler(AddItemsToCallList);\n// endregion\n\n// region sender\nRouter.registerHandler(AddLetter);\nRouter.registerHandler(AddItemsToSegment);\n// endregion\n\nRouter.registerHandler(RenderUserTagSelector);\nRouter.registerHandler(OpenTaskCreationForm);\nRouter.registerHandler(LoadEnumsAndEditSelected);\nRouter.registerHandler(ReloadPageAfterGridUpdate);\n","import { ProgressBarRepository } from 'crm.autorun';\nimport { Extension, Reflection, Type } from 'main.core';\nimport { Router } from './event/router';\n\nimport './event/handlers-registry';\n\n/**\n * @memberOf BX.Crm.EntityList.Panel\n */\nexport function init({ gridId, progressBarContainerId }): void\n{\n\tif (!Reflection.getClass('BX.Main.gridManager.getInstanceById'))\n\t{\n\t\tconsole.error('BX.Main.gridManager is not found on page');\n\n\t\treturn;\n\t}\n\n\tconst grid = BX.Main.gridManager.getInstanceById(gridId);\n\tif (!grid)\n\t{\n\t\tconsole.error('grid not found', gridId);\n\n\t\treturn;\n\t}\n\n\tconst progressBarContainer = document.getElementById(progressBarContainerId);\n\tif (!Type.isElementNode(progressBarContainer))\n\t{\n\t\tconsole.error('progressBarContainer not found', progressBarContainerId);\n\n\t\treturn;\n\t}\n\n\tconst progressBarRepo = new ProgressBarRepository(progressBarContainer);\n\n\tconst settings = Extension.getSettings('crm.entity-list.panel');\n\n\tconst eventRouter = new Router(grid, progressBarRepo, settings);\n\n\teventRouter.startListening();\n}\n","import { createCallList, createCallListAndShowAlertOnErrors } from './event/handlers/call-list/internals/functions';\nimport { LoadEnumsAndEditSelected } from './event/handlers/load-enums-and-edit-selected';\nimport { init } from './init';\n\n/**\n * @memberof BX.Crm.EntityList.Panel\n */\nfunction loadEnumsGridEditData(grid: BX.Main.grid, entityTypeId: number, categoryId: ?number): Promise<void>\n{\n\treturn LoadEnumsAndEditSelected.loadEnums(grid, entityTypeId, categoryId);\n}\n\nexport {\n\tinit,\n\tloadEnumsGridEditData,\n\tcreateCallList,\n\tcreateCallListAndShowAlertOnErrors,\n};\n"],"names":["createCallListAndShowAlertOnErrors","entityTypeId","selectedIds","createActivity","gridId","forAll","createCallList","then","errorMessages","Type","isArrayFilled","error","join","MessageBox","alert","Text","encode","Promise","resolve","BX","CrmCallListHelper","entityType","CrmEntityType","resolveName","entityIds","isNil","undefined","response","isPlainObject","SUCCESS","ERRORS","DATA","data","RESTRICTION","showRestriction","callListId","ID","top","BXIM","startCallList","Crm","Activity","Planner","showEdit","PROVIDER_ID","PROVIDER_TYPE_ID","ASSOCIATED_ENTITY_ID","restriction","Reflection","getClass","B24","licenseInfoPopup","show","HEADER","CONTENT","isStringFilled","eval","addItemsToCallList","context","addToCallList","BaseHandler","getEventName","Error","injectDependencies","progressBarRepo","extensionSettings","execute","grid","LoadEnumsAndEditSelected","constructor","categoryId","toInteger","isDefined","loadEnums","finally","editSelected","fieldNames","length","reject","Ajax","runAction","fields","alreadyLoaded","getId","cell","name","dataset","edit","add","catch","console","onAfterGridUpdate","delete","columnsAll","getParam","columnData","isListColumnWithEmptyData","isObjectLike","editable","type","has","push","set","Set","get","cells","getRows","getHeadFirstChild","getNode","Map","EventEmitter","subscribe","event","getData","Router","Main","TypeError","ProgressBarRepository","SettingsCollection","registerHandler","handler","startListening","HandlerClass","eventName","subscriptionHandler","stopListening","entries","unsubscribe","eventHandler","getSelectedIds","getActionsPanel","getForAllCheckbox","checked","NOTIFICATION_AUTO_HIDE_DELAY","showAnotherProcessRunningNotification","UI","Notification","Center","notify","content","Loc","getMessage","autoHide","autoHideDelay","ExecuteAssigment","valueElementId","document","getElementById","isElementNode","assignManager","BatchAssignmentManager","getItem","create","container","getOrCreateProgressBarContainer","id","isRunning","ProcessRegistry","isProcessRunning","userId","value","setAssignedById","resetEntityIds","setEntityIds","ExecuteConversion","manager","BatchConversionManager","schemeName","CrmLeadConversionScheme","dealcontactcompany","setConfig","createConfig","ExecuteDeletion","deletionManager","BatchDeletionManager","subscribeOnce","bind","actions","title","events","click","balloon","close","window","Helper","ExecuteExclusion","exclusionManager","BatchExclusionManager","ExecuteMerge","mergeManager","BatchMergeManager","ExecuteRefreshAccountingData","accountingManager","BatchRefreshAccountingDataManager","ExecuteSetCategory","categoryManager","BatchSetCategoryManager","setCategoryId","ExecuteSetExport","setExportManager","BatchSetExportManager","isExport","setExport","ExecuteSetOpened","openedManager","BatchSetOpenedManager","isOpened","setIsOpened","ExecuteSetStage","stageManager","BatchSetStageManager","stageId","setStageId","ExecuteWhatsappMessage","isWhatsAppEdnaEnabled","ednaManageUrl","exports","Runtime","loadExtension","Messages","options","whatsAppMessage","getInstance","e","supportTypes","enumeration","contact","company","includes","SidePanel","Instance","open","width","onClose","postMessage","getSlider","moduleId","itemCode","AddItemsToCallList","String","CreateAndStartCallList","CreateCallList","OpenTaskCreationForm","urlTemplate","entityTypeName","entityKeys","map","prepareEntityKey","url","replace","encodeURIComponent","ReloadPageAfterGridUpdate","isReloadOnlyIfForAll","toBoolean","eventSender","target","setTimeout","location","reload","RenderUserTagSelector","targetElementId","tagSelector","TagSelector","multiple","dialogOptions","entities","onTagAdd","tag","onTagRemove","renderTo","saveEntitiesToSegment","segmentId","errors","segment","AddItemsToSegment","disableActionsPanel","textSuccess","enableActionsPanel","AddLetter","letterCode","Sender","B24License","showMailingPopup","cacheable","init","progressBarContainerId","gridManager","getInstanceById","progressBarContainer","settings","Extension","getSettings","eventRouter","loadEnumsGridEditData"],"mappings":"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"}